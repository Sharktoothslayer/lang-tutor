services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lang-tutor-postgres
    environment:
      POSTGRES_DB: langtutor
      POSTGRES_USER: langtutor
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-langtutor123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U langtutor"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lang-tutor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: lang-tutor-ollama
    ports:
      - "11434:11434"  # âœ… FIXED: Use standard Ollama port
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_ORIGINS=http://192.168.0.223:3000,http://localhost:3000,http://192.168.0.223:80,http://localhost:80
      - OLLAMA_MODEL=mistral:7b
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_CPU_THREADS=6
      - OLLAMA_MAX_TOKENS=512
      - OLLAMA_CONTEXT_LENGTH=2048
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3.5'
        reservations:
          memory: 3G
          cpus: '2.0'
    # AMD GPU support (if using ROCm)
    # Uncomment the following if you have ROCm installed
    # runtime: rocm

  # Language Learning API Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lang-tutor-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://langtutor:${POSTGRES_PASSWORD:-langtutor123}@postgres:5432/langtutor
      - REDIS_URL=redis://redis:6379
      - OLLAMA_BASE_URL=http://ollama:11434
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=production
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      ollama:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lang-tutor-frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: lang-tutor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/user/appdata/lang-tutor/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/user/appdata/lang-tutor/redis
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/user/appdata/lang-tutor/ollama

networks:
  default:
    name: lang-tutor-network 